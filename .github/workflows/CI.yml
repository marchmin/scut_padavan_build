name: CI

# Controls when the action will run. 
on: 
  push:
  workflow_dispatch:

env:
  src_git: https://github.com/hanwckf/rt-n56u.git
  repo_name: rt-n56u
  toolchain_pkg: mipsel-linux-uclibc.tar.xz
  toolchain_url: https://github.com/hanwckf/padavan-toolchain/releases/download/v1.1
  ENABLED_CFG: |
    CONFIG_FIRMWARE_INCLUDE_TCPDUMP
    CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT
    CONFIG_FIRMWARE_INCLUDE_GDUT_DRCOM
    CONFIG_FIRMWARE_INCLUDE_DOGCOM
    CONFIG_FIRMWARE_INCLUDE_MINIEAP
    CONFIG_FIRMWARE_INCLUDE_NJIT_CLIENT
    CONFIG_FIRMWARE_INCLUDE_NAPT66
    CONFIG_FIRMWARE_INCLUDE_VLMCSD
    CONFIG_FIRMWARE_INCLUDE_TTYD
    CONFIG_FIRMWARE_INCLUDE_HTOP
    CONFIG_FIRMWARE_INCLUDE_NANO
    CONFIG_FIRMWARE_INCLUDE_MENTOHUST
  DISABLED_CFG: |
    CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS
    CONFIG_FIRMWARE_INCLUDE_SSSERVER
    CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER
    CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT
    CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD
    CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER
    CONFIG_FIRMWARE_INCLUDE_FRPC
    CONFIG_FIRMWARE_INCLUDE_FRPS
    CONFIG_FIRMWARE_INCLUDE_TUNSAFE

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: build
    runs-on: ubuntu-20.04
    env:
      build_variant: ${{ matrix.build_variant }}
      targets: ${{ matrix.targets }}
    strategy:
      matrix:
        include:
          - build_variant: "mt7621"
            targets: "K2P-5.0 DIR-878-5.0 RM2100 R2100"
    steps:
      - name: Prepare environment
        run: |
          sudo apt update
          sudo apt install libtool-bin gperf python-docutils autopoint gettext zip
      - name: Clone source
        run: |
          git clone --depth=1 $src_git $repo_name
          cd $repo_name
          GIT_VERSION="$(git rev-parse --short=7 HEAD 2>/dev/null)"
          echo "image_suffix=${GIT_VERSION}_$(date +%Y%m%d)" >> $GITHUB_ENV
          echo "image_name=images_${build_variant}_${GIT_VERSION}" >> $GITHUB_ENV
      - name: Run shellcheck
        run: |
          cd $repo_name
          if [ -f ./trunk/tools/shellcheck.sh ]; then sh ./trunk/tools/shellcheck.sh; fi
      - name: Prepare toolchain
        run: |
          cd $repo_name
          mkdir -p /opt/rt-n56u/toolchain-mipsel/toolchain-3.4.x && mkdir -p /opt/images/
          rm -rf toolchain-mipsel/ && mv -f * .[^.]* /opt/rt-n56u
          curl -LO ${toolchain_url}/${toolchain_pkg}
          tar -xf $toolchain_pkg -C /opt/rt-n56u/toolchain-mipsel/toolchain-3.4.x
      - name: Modify configs
        run: |
          cd /opt/rt-n56u/trunk/configs/templates
          for m in $targets; do if [ -f $m.config ]; then \
          for n in $ENABLED_CFG; do sed -i "/${n}/c${n}=y" $m.config; done; \
          for n in $DISABLED_CFG; do sed -i "/${n}/c${n}=n" $m.config; done; \
          fi; done
      - name: Start build
        run: |
          cd /opt/rt-n56u/trunk
          for m in $targets; do fakeroot ./build_firmware_ci $m; \
          if [ $? = 0 ]; then cp -f images/*.trx /opt/images/$m.trx; else exit 1; fi; \
          ./clear_tree_simple >/dev/null 2>&1; done
      - name: Create archive
        if: ${{ success() }}
        run: |
          cd /opt/images
          for m in $targets; do zip ${m}_${image_suffix}.zip $m.trx; done
          7z a -mx=9 ${image_name}.7z *.zip
      - name: Upload images to Artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2.2.1
        with:
          name: ${{ env.image_name }}
          path: /opt/images/${{ env.image_name }}.7z
